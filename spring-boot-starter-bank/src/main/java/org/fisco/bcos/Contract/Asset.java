package org.fisco.bcos.Contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"","0316600290048015610c1a5780601f10610bef57610100808354040283529160200191610c1a565b820191906000526020600020905b815481529060010190602001808311610bfd57829003601f168201915b50509350505050602060405180830381600087803b158015610c3b57600080fd5b505af1158015610c4f573d6000803e3d6000fd5b505050506040513d6020811015610c6557600080fd5b810190808051906020019092919050505095508873ffffffffffffffffffffffffffffffffffffffff1663e8434e396000896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610d7d5780601f10610d5257610100808354040283529160200191610d7d565b820191906000526020600020905b815481529060010190602001808311610d6057829003601f168201915b50509350505050602060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b505050506040513d6020811015610dc857600080fd5b8101908080519060200190929190505050945060009350600092508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e4757600080fd5b505af1158015610e5b573d6000803e3d6000fd5b505050506040513d6020811015610e7157600080fd5b810190808051906020019092919050505060001480610f2e57508473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b505050506040513d6020811015610f1957600080fd5b81019080805190602001909291905050506000145b15610f3c5760009950611287565b8573ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b505050506040513d6020811015610fd657600080fd5b810190808051906020019092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561105957600080fd5b505af115801561106d573d6000803e3d6000fd5b505050506040513d602081101561108357600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561113657600080fd5b505af115801561114a573d6000803e3d6000fd5b505050506040513d602081101561116057600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561121357600080fd5b505af1158015611227573d6000803e3d6000fd5b505050506040513d602081101561123d57600080fd5b8101908080519060200190929190505050925060008b850312156112645760009950611287565b8a840393508a830192506112788d85615346565b6112828c84615346565b600199505b5050505050505050509392505050565b6000806000806000806000806000806000735b53f124d15db5d770da16b76d280fe4421dda7c3373ffffffffffffffffffffffffffffffffffffffff16141515611349576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f596f7520617265206e6f7420557365720000000000000000000000000000000081525060200191505060405180910390fd5b611351615257565b995061135b615afa565b98508973ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b505050506040513d60208110156113eb57600080fd5b810190808051906020019092919050505097508773ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b657900000000000000000000000000000000000000000000000000000000008152506020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156115085780601f106114dd57610100808354040283529160200191611508565b820191906000526020600020905b8154815290600101906020018083116114eb57829003601f168201915b50509350505050600060405180830381600087803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663e44594b98f6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156115e957600080fd5b505af11580156115fd573d6000803e3d6000fd5b505050508973ffffffffffffffffffffffffffffffffffffffff1663e8434e3960008a6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117065780601f106116db57610100808354040283529160200191611706565b820191906000526020600020905b8154815290600101906020018083116116e957829003601f168201915b50509350505050602060405180830381600087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d602081101561175157600080fd5b810190808051906020019092919050505096508873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117c857600080fd5b505af11580156117dc573d6000803e3d6000fd5b505050506040513d60208110156117f257600080fd5b810190808051906020019092919050505095508573ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b6579000000000000000000000000000000000000000000000000000000000081525060200183810382528481815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561190f5780601f106118e45761010080835404028352916020019161190f565b820191906000526020600020905b8154815290600101906020018083116118f257829003601f168201915b50509350505050600060405180830381600087803b15801561193057600080fd5b505af1158015611944573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e44594b98e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156119f057600080fd5b505af1158015611a04573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff1663e8434e396001886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611b0d5780601f10611ae257610100808354040283529160200191611b0d565b820191906000526020600020905b815481529060010190602001808311611af057829003601f168201915b50509350505050602060405180830381600087803b158015611b2e57600080fd5b505af1158015611b42573d6000803e3d6000fd5b505050506040513d6020811015611b5857600080fd5b8101908080519060200190929190505050945060009350600092508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038160","0087803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b505050506040513d6020811015611c0157600080fd5b810190808051906020019092919050505060001480611cbe57508473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506040513d6020811015611ca957600080fd5b81019080805190602001909291905050506000145b15611ccc5760009a50612017565b8673ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611d3c57600080fd5b505af1158015611d50573d6000803e3d6000fd5b505050506040513d6020811015611d6657600080fd5b810190808051906020019092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611de957600080fd5b505af1158015611dfd573d6000803e3d6000fd5b505050506040513d6020811015611e1357600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b505050506040513d6020811015611ef057600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611fa357600080fd5b505af1158015611fb7573d6000803e3d6000fd5b505050506040513d6020811015611fcd57600080fd5b8101908080519060200190929190505050925060008c84031215611ff45760009a50612017565b8b840193508b830392506120088e85615346565b6120128d84615be9565b60019a505b505050505050505050509392505050565b606080600080606080600080737b52ba0c6f7ec03dec45d60721853ee38775da6e3373ffffffffffffffffffffffffffffffffffffffff161415156120d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f7520617265206e6f7420746561636865720000000000000000000000000081525060200191505060405180910390fd5b6120dd615afa565b95508573ffffffffffffffffffffffffffffffffffffffff1663e8434e3960018873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561216157600080fd5b505af1158015612175573d6000803e3d6000fd5b505050506040513d602081101561218b57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156122825780601f1061225757610100808354040283529160200191612282565b820191906000526020600020905b81548152906001019060200180831161226557829003601f168201915b50509350505050602060405180830381600087803b1580156122a357600080fd5b505af11580156122b7573d6000803e3d6000fd5b505050506040513d60208110156122cd57600080fd5b810190808051906020019092919050505094508473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561234457600080fd5b505af1158015612358573d6000803e3d6000fd5b505050506040513d602081101561236e57600080fd5b81019080805190602001909291905050506040519080825280602002602001820160405280156123ad5781602001602082028038833980820191505090505b5093508473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d602081101561243e57600080fd5b810190808051906020019092919050505060405190808252806020026020018201604052801561247d5781602001602082028038833980820191505090505b509250600091505b8473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156124e957600080fd5b505af11580156124fd573d6000803e3d6000fd5b505050506040513d602081101561251357600080fd5b81019080805190602001909291905050508212156127dc578473ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561259a57600080fd5b505af11580156125ae573d6000803e3d6000fd5b505050506040513d60208110156125c457600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561267757600080fd5b505af115801561268b573d6000803e3d6000fd5b505050506040513d60208110156126a157600080fd5b810190808051906020019092919050505084838151811015156126c057fe5b9060200190602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561277857600080fd5b505af115801561278c573d6000803e3d6000fd5b505050506040513d60208110156127a257600080fd5b810190808051906020019092919050505083838151811015156127c157fe5b90602001906020020181815250508180600101925050612485565b8383975097505050505050509091565b600080600080600080737b52ba0c6f7ec03dec45d60721853ee38775da6e3373ffffffffffffffffffffffffffffffffffffffff16141515612896576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f7520617265206e6f7420746561636865720000000000000000000000000081525060200191505060405180910390fd5b61289e615afa565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561290457600080fd5b505af1158015612918573d6000803e3d6000fd5b505050506040513d602081101561292e57600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612a4b5780601f10612a2057610100808354040283529160200191612a4b565b820191906000526020600020905b815481529060010190602001808311612a2e57829003601f168201915b50509350505050600060405180830381600087803b158015612a6c57600080fd5b505af1158015612a80573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e44594b9896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015612b2c57600080fd5b505af1158015612b40573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663e8434e396001866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020","01828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612c495780601f10612c1e57610100808354040283529160200191612c49565b820191906000526020600020905b815481529060010190602001808311612c2c57829003601f168201915b50509350505050602060405180830381600087803b158015612c6a57600080fd5b505af1158015612c7e573d6000803e3d6000fd5b505050506040513d6020811015612c9457600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612d0b57600080fd5b505af1158015612d1f573d6000803e3d6000fd5b505050506040513d6020811015612d3557600080fd5b810190808051906020019092919050505060001415612d575760009550612ef2565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015612dc757600080fd5b505af1158015612ddb573d6000803e3d6000fd5b505050506040513d6020811015612df157600080fd5b81019080805190602001909291905050509150868273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015612ea557600080fd5b505af1158015612eb9573d6000803e3d6000fd5b505050506040513d6020811015612ecf57600080fd5b8101908080519060200190929190505050019050612eed8882615be9565b600195505b505050505092915050565b600080600060606000806000735b53f124d15db5d770da16b76d280fe4421dda7c3373ffffffffffffffffffffffffffffffffffffffff16141515612faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f596f7520617265206e6f7420557365720000000000000000000000000000000081525060200191505060405180910390fd5b612fb2615257565b95508573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561301857600080fd5b505af115801561302c573d6000803e3d6000fd5b505050506040513d602081101561304257600080fd5b810190808051906020019092919050505094506040805190810160405280600481526020017f757365720000000000000000000000000000000000000000000000000000000081525093508473ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561314d578082015181840152602081019050613132565b50505050905090810190601f16801561317a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561319a57600080fd5b505af11580156131ae573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663e44594b9896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561325a57600080fd5b505af115801561326e573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e8434e3985876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561332d578082015181840152602081019050613312565b50505050905090810190601f16801561335a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561337a57600080fd5b505af115801561338e573d6000803e3d6000fd5b505050506040513d60208110156133a457600080fd5b81019080805190602001909291905050509250600091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561341f57600080fd5b505af1158015613433573d6000803e3d6000fd5b505050506040513d602081101561344957600080fd5b8101908080519060200190929190505050600014156134755761346b88614060565b5060009650613600565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156134e557600080fd5b505af11580156134f9573d6000803e3d6000fd5b505050506040513d602081101561350f57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156135c257600080fd5b505af11580156135d6573d6000803e3d6000fd5b505050506040513d60208110156135ec57600080fd5b810190808051906020019092919050505096505b505050505050919050565b6000806000606060008060008073a7193b772501066c8a809d8903ce2e0af5d7a9e43373ffffffffffffffffffffffffffffffffffffffff161415156136b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f7520617265206e6f7420746561636865720000000000000000000000000081525060200191505060405180910390fd5b6136c1615afa565b96508673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561372757600080fd5b505af115801561373b573d6000803e3d6000fd5b505050506040513d602081101561375157600080fd5b810190808051906020019092919050505095506040805190810160405280600981526020017f62757373696e657373000000000000000000000000000000000000000000000081525094508573ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561385c578082015181840152602081019050613841565b50505050905090810190601f1680156138895780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156138a957600080fd5b505af11580156138bd573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e44594b98a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561396957600080fd5b505af115801561397d573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff1663e8434e3986886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613a3c578082015181840152602081019050613a21565b50505050905090810190601f168015613a695780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613a8957600080fd5b505af1158015613a9d573d6000803e3d6000fd5b505050506040513d6020811015613ab357600080fd5b81019080805190602001909291905050509350600092508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613b2e57600080fd5b505af1158015613b42573d6000803e3d6000fd5b505050506040513d6020811015613b5857600080fd5b81019080805190602001909291905050506000141561404f57613b79615afa565b96508673ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020","60405180830381600087803b158015613bdf57600080fd5b505af1158015613bf3573d6000803e3d6000fd5b505050506040513d6020811015613c0957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613cdc578082015181840152602081019050613cc1565b50505050905090810190601f168015613d095780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613d2957600080fd5b505af1158015613d3d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015613de957600080fd5b505af1158015613dfd573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f73636f726500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015613ea957600080fd5b505af1158015613ebd573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff166331afac3686846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613f7c578082015181840152602081019050613f61565b50505050905090810190601f168015613fa95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613fc957600080fd5b505af1158015613fdd573d6000803e3d6000fd5b505050506040513d6020811015613ff357600080fd5b810190808051906020019092919050505090507f27ee3a70d7f472bced0bb26eafaa70a281de40c562b56c14757b966f55720224896000604051808381526020018281526020019250505060405180910390a160019750614054565b600097505b50505050505050919050565b60008060006060600080600080735b53f124d15db5d770da16b76d280fe4421dda7c3373ffffffffffffffffffffffffffffffffffffffff1614151561410e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f596f7520617265206e6f7420557365720000000000000000000000000000000081525060200191505060405180910390fd5b614116615257565b96508673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561417c57600080fd5b505af1158015614190573d6000803e3d6000fd5b505050506040513d60208110156141a657600080fd5b810190808051906020019092919050505095506040805190810160405280600481526020017f757365720000000000000000000000000000000000000000000000000000000081525094508573ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156142b1578082015181840152602081019050614296565b50505050905090810190601f1680156142de5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156142fe57600080fd5b505af1158015614312573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e44594b98a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156143be57600080fd5b505af11580156143d2573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff1663e8434e3986886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015614491578082015181840152602081019050614476565b50505050905090810190601f1680156144be5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156144de57600080fd5b505af11580156144f2573d6000803e3d6000fd5b505050506040513d602081101561450857600080fd5b81019080805190602001909291905050509350600092508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561458357600080fd5b505af1158015614597573d6000803e3d6000fd5b505050506040513d60208110156145ad57600080fd5b810190808051906020019092919050505060001415614a9a578673ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561462a57600080fd5b505af115801561463e573d6000803e3d6000fd5b505050506040513d602081101561465457600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561472757808201518184015260208101905061470c565b50505050905090810190601f1680156147545780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561477457600080fd5b505af1158015614788573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561483457600080fd5b505af1158015614848573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f73636f726500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156148f457600080fd5b505af1158015614908573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff166331afac3686846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156149c75780820151818401526020810190506149ac565b50505050905090810190601f1680156149f45780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015614a1457600080fd5b505af1158015614a28573d6000803e3d6000fd5b505050506040513d6020811015614a3e57600080fd5b810190808051906020019092919050505090507f9d8f44be01c0bd73df53384b060568b0792a964d50866593db115ae8d7bd25c4896000604051808381526020018281526020019250505060405180910390a160019750614a9f565b600097505b50505050505050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614b415780601f10614b1657610100808354040283529160200191614b41565b820191906000526020600020905b815481529060010190602001808311614b2457829003601f168201915b505050505081565b60008060008060008073a7193b772501066c8a809d8903ce2e0af5d7a9e43373ffffffffffffffffffffffffffffffffffffffff16141515614bf3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f75206172","65206e6f7420746561636865720000000000000000000000000081525060200191505060405180910390fd5b614bfb615afa565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614c6157600080fd5b505af1158015614c75573d6000803e3d6000fd5b505050506040513d6020811015614c8b57600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015614da85780601f10614d7d57610100808354040283529160200191614da8565b820191906000526020600020905b815481529060010190602001808311614d8b57829003601f168201915b50509350505050600060405180830381600087803b158015614dc957600080fd5b505af1158015614ddd573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e44594b9886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015614e8957600080fd5b505af1158015614e9d573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663e8434e396001866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015614fa65780601f10614f7b57610100808354040283529160200191614fa6565b820191906000526020600020905b815481529060010190602001808311614f8957829003601f168201915b50509350505050602060405180830381600087803b158015614fc757600080fd5b505af1158015614fdb573d6000803e3d6000fd5b505050506040513d6020811015614ff157600080fd5b81019080805190602001909291905050509250600091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561506c57600080fd5b505af1158015615080573d6000803e3d6000fd5b505050506040513d602081101561509657600080fd5b8101908080519060200190929190505050600014156150c2576150b88761360b565b506000955061524d565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561513257600080fd5b505af1158015615146573d6000803e3d6000fd5b505050506040513d602081101561515c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f73636f7265000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561520f57600080fd5b505af1158015615223573d6000803e3d6000fd5b505050506040513d602081101561523957600080fd5b810190808051906020019092919050505095505b5050505050919050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f745f757365720000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561530157600080fd5b505af1158015615315573d6000803e3d6000fd5b505050506040513d602081101561532b57600080fd5b81019080805190602001909291905050509050809250505090565b6000806000615353615257565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156153b957600080fd5b505af11580156153cd573d6000803e3d6000fd5b505050506040513d60208110156153e357600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b51660006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b657900000000000000000000000000000000000000000000000000000000008152506020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156155005780601f106154d557610100808354040283529160200191615500565b820191906000526020600020905b8154815290600101906020018083116154e357829003601f168201915b50509350505050600060405180830381600087803b15801561552157600080fd5b505af1158015615535573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156155e157600080fd5b505af11580156155f5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f73636f726500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156156a157600080fd5b505af11580156156b5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561571d57600080fd5b505af1158015615731573d6000803e3d6000fd5b505050506040513d602081101561574757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b657900000000000000000000000000000000000000000000000000000000008152506020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156158645780601f1061583957610100808354040283529160200191615864565b820191906000526020600020905b81548152906001019060200180831161584757829003601f168201915b50509350505050600060405180830381600087803b15801561588557600080fd5b505af1158015615899573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e44594b9866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561594557600080fd5b505af1158015615959573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a1600084846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015615a955780601f10615a6a57610100808354040283529160200191615a95565b820191906000526020600020905b815481529060010190602001808311615a7857829003601f168201915b5050945050505050602060405180830381600087803b158015615ab757600080fd5b505af1158015615acb573d6000803e3d6000fd5b505050506040513d6020811015615ae157600080fd5b8101908080519060200190929190505050505050505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f745f62757373696e657373000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015615ba457600080fd5b505af1158015615bb8573d6000803e3d6000fd5b505050506040513d6020811015615b","ce57600080fd5b81019080805190602001909291905050509050809250505090565b6000806000615bf6615afa565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015615c5c57600080fd5b505af1158015615c70573d6000803e3d6000fd5b505050506040513d6020811015615c8657600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015615d4157600080fd5b505af1158015615d55573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f73636f726500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015615e0157600080fd5b505af1158015615e15573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015615e7d57600080fd5b505af1158015615e91573d6000803e3d6000fd5b505050506040513d6020811015615ea757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f6b65790000000000000000000000000000000000000000000000000000000000815250602001838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015615fc45780601f10615f9957610100808354040283529160200191615fc4565b820191906000526020600020905b815481529060010190602001808311615fa757829003601f168201915b50509350505050600060405180830381600087803b158015615fe557600080fd5b505af1158015615ff9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e44594b9866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260028152602001807f696400000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156160a557600080fd5b505af11580156160b9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a1600184846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156161f55780601f106161ca576101008083540402835291602001916161f5565b820191906000526020600020905b8154815290600101906020018083116161d857829003601f168201915b5050945050505050602060405180830381600087803b15801561621757600080fd5b505af115801561622b573d6000803e3d6000fd5b505050506040513d602081101561624157600080fd5b81019080805190602001909291905050505050505050505600a165627a7a7230582017db89aebb8cb7152844eade1ff7dbff5442c5773e57b9330fd33393848eb14a0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"_key2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id_01\",\"type\":\"int256\"},{\"name\":\"id_02\",\"type\":\"int256\"},{\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"userTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"int256\"},{\"name\":\"bussiness_id\",\"type\":\"int256\"},{\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"buyScore\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"searchAllBussinessScore\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"int256\"},{\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"applyScore\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"int256\"}],\"name\":\"searchUserScore\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"int256\"}],\"name\":\"bussinessRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"int256\"}],\"name\":\"userRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_key1\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"int256\"}],\"name\":\"searchBussinessScore\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"UserRegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"BussinessRegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC__KEY2 = "_key2";

    public static final String FUNC_USERTRANSFER = "userTransfer";

    public static final String FUNC_BUYSCORE = "buyScore";

    public static final String FUNC_SEARCHALLBUSSINESSSCORE = "searchAllBussinessScore";

    public static final String FUNC_APPLYSCORE = "applyScore";

    public static final String FUNC_SEARCHUSERSCORE = "searchUserScore";

    public static final String FUNC_BUSSINESSREGISTER = "bussinessRegister";

    public static final String FUNC_USERREGISTER = "userRegister";

    public static final String FUNC__KEY1 = "_key1";

    public static final String FUNC_SEARCHBUSSINESSSCORE = "searchBussinessScore";

    public static final Event USERREGISTEREVENT_EVENT = new Event("UserRegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event BUSSINESSREGISTEREVENT_EVENT = new Event("BussinessRegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Asset(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Asset(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Asset(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Asset(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<String> _key2() {
        final Function function = new Function(FUNC__KEY2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> userTransfer(BigInteger id_01, BigInteger id_02, BigInteger score) {
        final Function function = new Function(
                FUNC_USERTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id_01), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id_02), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void userTransfer(BigInteger id_01, BigInteger id_02, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_USERTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id_01), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id_02), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String userTransferSeq(BigInteger id_01, BigInteger id_02, BigInteger score) {
        final Function function = new Function(
                FUNC_USERTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id_01), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id_02), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getUserTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERTRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUserTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_USERTRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> buyScore(BigInteger user_id, BigInteger bussiness_id, BigInteger score) {
        final Function function = new Function(
                FUNC_BUYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(bussiness_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void buyScore(BigInteger user_id, BigInteger bussiness_id, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BUYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(bussiness_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String buyScoreSeq(BigInteger user_id, BigInteger bussiness_id, BigInteger score) {
        final Function function = new Function(
                FUNC_BUYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(bussiness_id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getBuyScoreInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getBuyScoreOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUYSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple2<List<byte[]>, List<BigInteger>>> searchAllBussinessScore() {
        final Function function = new Function(FUNC_SEARCHALLBUSSINESSSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Int256>>() {}));
        return new RemoteCall<Tuple2<List<byte[]>, List<BigInteger>>>(
                new Callable<Tuple2<List<byte[]>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<byte[]>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<byte[]>, List<BigInteger>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Int256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> applyScore(BigInteger id, BigInteger score) {
        final Function function = new Function(
                FUNC_APPLYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyScore(BigInteger id, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyScoreSeq(BigInteger id, BigInteger score) {
        final Function function = new Function(
                FUNC_APPLYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, BigInteger> getApplyScoreInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPLYSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getApplyScoreOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_APPLYSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> searchUserScore(BigInteger id) {
        final Function function = new Function(
                FUNC_SEARCHUSERSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void searchUserScore(BigInteger id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SEARCHUSERSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String searchUserScoreSeq(BigInteger id) {
        final Function function = new Function(
                FUNC_SEARCHUSERSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getSearchUserScoreInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SEARCHUSERSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getSearchUserScoreOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SEARCHUSERSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> bussinessRegister(BigInteger id) {
        final Function function = new Function(
                FUNC_BUSSINESSREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void bussinessRegister(BigInteger id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BUSSINESSREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String bussinessRegisterSeq(BigInteger id) {
        final Function function = new Function(
                FUNC_BUSSINESSREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getBussinessRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUSSINESSREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getBussinessRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUSSINESSREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> userRegister(BigInteger id) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void userRegister(BigInteger id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String userRegisterSeq(BigInteger id) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getUserRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getUserRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_USERREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<String> _key1() {
        final Function function = new Function(FUNC__KEY1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> searchBussinessScore(BigInteger id) {
        final Function function = new Function(FUNC_SEARCHBUSSINESSSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<UserRegisterEventEventResponse> getUserRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<UserRegisterEventEventResponse> responses = new ArrayList<UserRegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRegisterEventEventResponse typedResponse = new UserRegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerUserRegisterEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(USERREGISTEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerUserRegisterEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(USERREGISTEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<BussinessRegisterEventEventResponse> getBussinessRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BUSSINESSREGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<BussinessRegisterEventEventResponse> responses = new ArrayList<BussinessRegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BussinessRegisterEventEventResponse typedResponse = new BussinessRegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerBussinessRegisterEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BUSSINESSREGISTEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerBussinessRegisterEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BUSSINESSREGISTEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from_account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to_account = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerTransferEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerTransferEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Asset load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Asset(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Asset load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Asset(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Asset load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Asset(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Asset load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Asset(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Asset> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Asset.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Asset> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Asset.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Asset> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Asset.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Asset> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Asset.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UserRegisterEventEventResponse {
        public Log log;

        public BigInteger id;

        public BigInteger score;
    }

    public static class BussinessRegisterEventEventResponse {
        public Log log;

        public BigInteger id;

        public BigInteger score;
    }

    public static class TransferEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String from_account;

        public String to_account;

        public BigInteger amount;
    }
}
